MQTT： Message Queue Telemetry Transport

Characteristics:
-实现简单
-提供数据传输的 QoS
-轻量、占用带宽低
-可传输任意类型的数据
-可保持的会话（session）

What is MQTT?
-基于 TCP 协议的应用层协议；
-采用 C/S 架构；   //**Client/Server，与之相对的Browser/Server**//
-使用订阅/发布模式，将消息的发送方和接受方解耦；
-提供 3 种消息的 QoS（Quality of Service）: 至多一次，最少一次，只有一次；
-收发消息都是异步的，发送方不需要等待接收方应答。

与传统消息队列的区别：
-在传统消息队列中，在发送消息之前，必须先创建相应的队列；
 在 MQTT 中，不需要预先创建要发布的主题（可订阅的 Topic）；
-在传统消息队列中，未被消费的消息总是会被保存在某个队列中，直到有一个消费者将其消费；
 在 MQTT 中，如果发布一个没有被任何客户端订阅的消息，这个消息将被直接扔掉；
-在传统消息队列中，一个消息只能被一个客户端获取；
 在 MQTT 中，一个消息可以被多个订阅者获取，MQTT 协议也不支持指定消息被单一的客户端获取。
 
 MQTT协议的通信模型：
 标准流程：发布方（Publisher）将消息发送到Broker
          ->Broker接收到信息后，检查哪些订阅方订阅了消息，将消息发送给订阅方（Subscriber）
          ->订阅方从Broker获取消息
          
 MQTT Client: 运行了MQTT的库或代码的终端，称为MQTT的Client。
              库有多语言实现：https://github.com/mqtt/mqtt.github.io/wiki/libraries
 
 MQTT Broker：接受Publischer的消息，发送给相应的Subscriber。
              可以横向扩展，比如集群，来满足大量Client接入；
              可以扩展接入业务系统；
              易于监控，满足高可用性。
            
 MQTT协议数据包：
-固定头（Fixed header）：存在于所有的 MQTT 数据包中，用于表示数据包类型及对应标识，表明数据包大小；
-可变头（Variable header）：存在于部分类型的 MQTT 数据包中，具体内容由相应类型的数据包决定；
-消息体（Payload）：存在于部分 MQTT 数据包中，存储消息的具体数据。

--固定头结构：
---第一字节：固定头的第一个字节的高 4 位 bit 用于指定该数据包的类型
            固定头的低 4 位 bit 用于指定数据包的 Flag
---第二字节开始：用于标识 MQTT 数据包长度的字段，最少一个字节，最大四个字节
                每一个字节的低 7 位用于标识值，范围为 0~127
                最高位的 1 位是标识位，用来说明是否有后续字节来标识长度
                这四个字节最多可以标识的包长度为：(0xFF, 0xFF, 0xFF, 0x7F) = 268435455 字节，约 256M
                （MQTT 协议中数据包的最大长度）

